<?php


namespace Encore\OrgRbac\Http\Controllers;


use Encore\OrgRbac\Form;
use Encore\OrgRbac\Form\NestedForm;
use Encore\OrgRbac\Layout\Content;
use Encore\OrgRbac\Models\Enums\DepartmentType;
use Encore\OrgRbac\Traits\PlatformPermission;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;

class UserController extends AdminController
{
    use PlatformPermission;

    /**
     * Title for current resource.
     *
     * @var string
     */
    protected $title = '用户';

    protected $model;

    protected $departmentId;


    public function __construct(Request $request)
    {
        $model = config('org.database.users_model');
        $this->model = new $model();
        parent::__construct($request);
        $this->departmentId = $request->input('department_id');
        if ($this->departmentId) {
            $this->setPlatformIdByDepartmentId($this->departmentId);
        }
    }

    public function create(Content $content)
    {
        session()->put('user_back_url',request()->get('back_url'));
        return parent::create($content); // TODO: Change the autogenerated stub
    }

    public function edit($id, Content $content)
    {
        session()->put('user_back_url',request()->get('back_url'));
        return parent::edit($id, $content); // TODO: Change the autogenerated stub
    }


    /**
     *
     */
    protected function form()
    {
        $form = new Form($this->model);
        $form->tab('基本信息',function (Form $form) {

            $userTable = config('org.database.users_table');
            $connection = config('org.database.connection');
            $form->display('id', 'ID');
            $form->text('username', trans('admin.username'))
                ->creationRules(['required', "unique:{$connection}.{$userTable}"])
                ->updateRules(function () use($form,$connection,$userTable){
                    return ['required', "unique:{$connection}.{$userTable},username,{$form->model()->id}"];
                });

            $form->text('name', trans('admin.name'))->rules('required');
            $form->image('avatar', trans('admin.avatar'));
            $form->password('password', trans('admin.password'))->rules('required|confirmed');
            $form->password('password_confirmation', trans('admin.password_confirmation'))->rules('required')
                ->default(function ($userForm) {
                    return $userForm->model()->password;
                });

            $form->ignore(['password_confirmation']);

            $form->display('created_at', trans('admin.created_at'));
            $form->display('updated_at', trans('admin.updated_at'));

            $form->saving(function (Form $form) {
                if ($form->isCreating()) {
                    $form->model()->id = app('primaryKeyGenerate')->load(config('org.database.users_primary_key_generate_driver'))->generate();
                }
                if ($form->password && $form->model()->password != $form->password) {
                    $form->password = bcrypt($form->password);
                }
            });
        })->tab('部门职权',function (Form $form) {
            $form->hasMany('duties','部门',function (NestedForm $form) {
                $form->secondSelect('department_id','部门')
                    ->default($this->departmentId)
                    ->loadData($this->getTreeToCompanyAndDepartment());
                $form->select('department_type','类型')->options(DepartmentType::$text);
            });
            $form->ignore(['duties.company.id']);
        })->tab('用户详情',function (Form $form) {
            $form->mobile('info.phone',"联系方式");
            $form->email('info.email',"邮箱");
            $form->radio("info.is_check_identity","是否实名")->options([
                0 => '未实名',
                1 => '已实名'
            ])->when(1,function (Form $form) {
                $form->text("info.realname","姓名");
                $form->text("info.identity_code","身份证号码");
            });
        });
        $form->saved(function (Form $form) {
            $backUrl = $this->getBackUrl();
            return redirect($backUrl)->withErrors(admin_toastr('已保存','success'));
        });
        return $form;
    }

    protected function getBackUrl()
    {
        $backUrl = session()->pull('user_back_url');
        $backUrl = base64_decode($backUrl);
        if (!$backUrl) $backUrl = url('admin/auth/organizations');
        return $backUrl;
    }

    public function destroy($id)
    {
        $trans = [
            'failed'    => trans('admin.delete_failed'),
            'succeeded' => trans('admin.delete_succeeded'),
        ];
        try {
            DB::transaction(function () use ($id) {
                //判断当前ID是否存在
                $model = $this->model->find($id);
                if (empty($model)) {
                    throw new \Exception("the current department does not exist");
                }
                $this->model->where('id',$id)->delete();
                $this->model->duties()->delete();
            });
            return $this->actionSuccess($trans['succeeded']);
        } catch (\Exception $exception) {
            return $this->actionError("{$trans['failed']} : {$exception->getMessage()}");
        }
    }

}
