<?php

namespace Encore\OrgRbac\TabTable;

use Encore\Admin\Table;
use Encore\Admin\Table\Model;
use Encore\OrgRbac\TabTable\Displayers\DropdownActions;
use Encore\OrgRbac\TabTable\Tools\CreateButton;
use Illuminate\Database\Eloquent\Model as Eloquent;


class TabTable extends Table
{
    protected $resourceUrl;
    protected $backUrl;
    protected $createHandleParams = [];
    protected $authButtonUri = [
        'create' => '',
        'update' => '',
        'delete' => '',
    ];



    public function setResourceUrl($resourceUrl)
    {
        $this->resourceUrl = $resourceUrl;
    }

    public function getResourceUrl()
    {
        return $this->resourceUrl;
    }

    public function setBackUrl($backUrl)
    {
        $this->backUrl = $backUrl;
    }

    public function getBackUrl()
    {
        return $this->backUrl;
    }

    public function setCreateHandleParams(array $params)
    {
        $this->createHandleParams = $params;
    }

    public function setCreateButtonUri($uri)
    {
        $this->authButtonUri['create'] = $uri;
    }

    public function getCreateButtonUri()
    {
        return $this->authButtonUri['create'];
    }

    public function getCreateHandleParams()
    {
        return $this->createHandleParams;
    }

    public function getActionClass()
    {
        if ($this->actionsClass) {
            return $this->actionsClass;
        }

        if ($class = config('org.table_action_class')) {
            return $class;
        }

        return DropdownActions::class;
    }

    /**
     * @param string $action
     */
    public function dblclick($action = 'select')
    {
        if (in_array($action, ['view', 'edit', 'delete', 'select'])) {
            $this->actions(function (DropdownActions $actions) use ($action) {
                $actions->dblclick($action);
            });
        }

        return $this;
    }


    /**
     * Render create button for table.
     *
     * @return string
     */
    public function renderCreateButton()
    {
        return (new CreateButton($this,$this->createHandleParams))->render();
    }

    public function __toString()
    {
        return $this->render();
    }

    public function render()
    {
        $resourceUrl = $this->resourceUrl;
        $backUrl = $this->backUrl;
        $this->actions(function ($actions) use($resourceUrl,$backUrl) {
            $actions->setResourceUrl($resourceUrl);
            $actions->setBackUrl($backUrl);
        });
        return parent::render(); // TODO: Change the autogenerated stub
    }
}

